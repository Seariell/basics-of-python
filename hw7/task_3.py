# homework lesson: 7, task: 3
"""
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
количеству ячеек клетки (целое число). В классе должны быть реализованы методыперегрузки арифметических
операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
целочисленное (с округлением до целого) деление клеток, соответственно.

Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
сумме ячеек исходных двух клеток.

Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
произведение количества ячеек этих двух клеток.

Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
в ряду. Данный метод позволяет организовать ячейки по рядам.Метод должен возвращать
строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
make_order() вернет строку: *****\n*****\n**.

Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    def __init__(self, number_of_cells: int):
        self._number_of_cells = number_of_cells

    def __add__(self, other):
        if type(other) == Cell:
            result = Cell(self._number_of_cells + other._number_of_cells)
            return result
        else:
            print('Только для клеток')

    def __sub__(self, other):
        if type(other) == Cell:
            if self._number_of_cells > other._number_of_cells:
                return Cell(self._number_of_cells - other._number_of_cells)
            else:
                print('Разность меньше нуля')
        else:
            print('Только для клеток')

    def __mul__(self, other):
        if type(other) == Cell:
            return Cell(self._number_of_cells * other._number_of_cells)
        else:
            print('Только для клеток')

    def __truediv__(self, other):
        if type(other) == Cell:
            return Cell(self._number_of_cells // other._number_of_cells)
        else:
            print('Только для клеток')

    def __str__(self):
        return str(self._number_of_cells)

    def make_order(self, n: int):
        result = ''
        for idx in range(1, self._number_of_cells + 1):
            result += '*'
            if idx % n == 0 and idx != self._number_of_cells:
                result += '\n'
        return result


my_cell = Cell(15)
q = my_cell.make_order(5)
# print(q)
second_cell = Cell(12)
test = second_cell - 5
print(test)
